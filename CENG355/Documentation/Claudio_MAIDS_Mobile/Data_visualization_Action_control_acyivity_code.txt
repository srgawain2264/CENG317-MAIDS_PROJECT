package com.example.maids1;

import android.app.Activity;
import android.graphics.Color;
import android.os.Bundle;
package com.example.maids1;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.graphics.Bitmap;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.StrictMode;
import android.view.View;
import android.webkit.WebSettings;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.Toast;

import com.example.maids1.myapplication.R;
import com.jcraft.jsch.Channel;
import com.jcraft.jsch.ChannelExec;
import com.jcraft.jsch.ChannelSftp;
import com.jcraft.jsch.JSch;
import com.jcraft.jsch.Session;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.util.Properties;


public class Main3Activity extends Activity {

    private Button mButton1;
    private Button mButton2;
    private Button mButton3;
    private Button mButton4;
    private Button mButton5;
    private Button mButton6;
    private WebView webView;
    private ImageView imageView;
    private Bitmap bimage = null;
    private String username = "pi";
    private String password = "srgawain2264";
    private String host = "192.168.0.10";
    private int port = 22;
    private static JSch jsch = new JSch();

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main3);
        if (android.os.Build.VERSION.SDK_INT > 9) {
            StrictMode.ThreadPolicy policy = new StrictMode.ThreadPolicy.Builder().permitAll().build();
            StrictMode.setThreadPolicy(policy);
        }

        mButton1 = findViewById(R.id.button1);
        mButton1.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Toast.makeText(getApplicationContext(),
                        "Retrieving DB Information...", Toast.LENGTH_SHORT).show();
                WebView htmlWebView = findViewById(R.id.webview);
                htmlWebView.setWebViewClient(new CustomWebViewClient());
                WebSettings webSetting = htmlWebView.getSettings();
                webSetting.setJavaScriptEnabled(true);
                webSetting.setDisplayZoomControls(true);
                htmlWebView.loadUrl("https://singular-gar-5555.dataplicity.io/maidsintrusion.php");
            }
        });


        mButton2 = findViewById(R.id.button2);
        mButton2.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                try {
                    Toast.makeText(getApplicationContext(),
                            "Retrieving REMOTE Intrusion Photo...", Toast.LENGTH_SHORT).show();
                    getRemoteFile();
                    Toast.makeText(getApplicationContext(),
                            "REMOTE Intrusion Photo Retrieved...", Toast.LENGTH_SHORT).show();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });

        mButton6 = findViewById(R.id.button6);
        mButton6.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                try {

                    Toast.makeText(getApplicationContext(),
                            "Displaying Intrusion Image...", Toast.LENGTH_SHORT).show();
                    ImageView image = findViewById(R.id.imageView2);
                    image.setImageResource(R.drawable.lion3);

                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

        });


        mButton3 = findViewById(R.id.button3);
        mButton3.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Toast.makeText(getApplicationContext(),
                        "Testing LEDs Remotely...", Toast.LENGTH_LONG).show();
                // Do something
                @SuppressLint("StaticFieldLeak") final AsyncTask<Integer, Void, Void> execute = new AsyncTask<Integer, Void, Void>() {
                    @Override
                    protected Void doInBackground(Integer... params) {
                        try {
                            testLedsCommand(username,password,host,port);
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        return null;
                    }
                }.execute(1);

                Toast.makeText(getApplicationContext(),
                        "LEDs Test Completed...", Toast.LENGTH_LONG).show();
            }
        });

        mButton4 = findViewById(R.id.button4);
        mButton4.setOnClickListener(new View.OnClickListener() {
            @SuppressLint("StaticFieldLeak")
            @Override
            public void onClick(View view) {
                Toast.makeText(getApplicationContext(),
                        "Activating MAIDS Remotely...", Toast.LENGTH_SHORT).show();
                // Do something
                final AsyncTask<Integer, Void, Void> execute = new AsyncTask<Integer, Void, Void>() {
                    @Override
                    protected Void doInBackground(Integer... params) {
                        try {
                            maidsOnCommand(username,password,host,port);
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        return null;
                    }
                }.execute(1);
            }
        });

        mButton5 = findViewById(R.id.button5);
        mButton5.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Toast.makeText(getApplicationContext(),
                        "Deactivating MAIDS Remotely...", Toast.LENGTH_SHORT).show();
                // Do something
                @SuppressLint("StaticFieldLeak") final AsyncTask<Integer, Void, Void> execute = new AsyncTask<Integer, Void, Void>() {
                    @Override
                    protected Void doInBackground(Integer... params) {
                        try {
                            maidsOffCommand(username,password,host,port);
                         } catch (Exception e) {
                            e.printStackTrace();
                        }
                        return null;
                    }
                }.execute(1);
            }
        });
    }

    class CustomWebViewClient extends WebViewClient {
        @Override
        public boolean shouldOverrideUrlLoading(WebView view, String url) {
            view.loadUrl(url);
            return true;
        }
    }

    public String testLedsCommand(String username, String password, String host, int port)
            throws Exception {
        //JSch jsch = new JSch();
        Session session = jsch.getSession(username, host, port);
        session.setPassword(password);
        // Avoid asking for key confirmation
        Properties prop = new Properties();
        prop.put("StrictHostKeyChecking", "no");
        session.setConfig(prop);
        session.connect();
        // SSH Channel
        ChannelExec channelssh = (ChannelExec) session.openChannel("exec");
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        channelssh.setOutputStream(baos);
        // Execute command
        channelssh.setCommand("python3 testleds.py");
        channelssh.connect();
        channelssh.disconnect();
        return baos.toString();

    }

    public String maidsOnCommand(String username, String password, String hostname, int port)
            throws Exception {
        //JSch jsch = new JSch();
        Session session = jsch.getSession(username, hostname, port);
        session.setPassword(password);
        // Avoid asking for key confirmation
        Properties prop = new Properties();
        prop.put("StrictHostKeyChecking", "no");
        session.setConfig(prop);
        session.connect();
        // SSH Channel
        ChannelExec channelssh = (ChannelExec) session.openChannel("exec");
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        channelssh.setOutputStream(baos);
        // Execute command
        channelssh.setCommand("python3 maids_final_python_code_22102019_bak1.py");
        channelssh.connect();
        channelssh.disconnect();
        return baos.toString();
    }

    public void maidsOffCommand(String username, String password, String hostname, int port)
            throws Exception {
        //JSch jsch = new JSch();
        Session session = jsch.getSession(username, hostname, port);
        session.setPassword(password);
        // Avoid asking for key confirmation
        Properties prop = new Properties();
        prop.put("StrictHostKeyChecking", "no");
        session.setConfig(prop);
        session.connect();
        // SSH Channel
        ChannelExec channelssh = (ChannelExec) session.openChannel("shell");
        channelssh.connect();
        OutputStream out = channelssh.getOutputStream();
        out.write(3); // send CTRL-C
        out.flush();
        channelssh.disconnect();
    }

    public void getRemoteFile() throws Exception {

        String REMOTEDIR = "/home/pi/webcam/";
        String REMOTEFILE = "image.jpg";
        String LOCALDIR = "/home/maids1/...";

        //String command1="scp pi@192.168.0.12:/home/pi/webcam/image.jpg c:\\Users\\cfpm\\Desktop";

        try{
            //JSch jsch = new JSch();
            Session session = jsch.getSession(username, host, port);
            session.setPassword(password);
            java.util.Properties config = new java.util.Properties();
            config.put("StrictHostKeyChecking", "no");
            session.setConfig(config);
            session.connect();
            Toast.makeText(getApplicationContext(),
                    "Connected to Remote system...", Toast.LENGTH_SHORT).show();
            Channel channel=session.openChannel("sftp");
            channel.connect();
            ChannelSftp channelSftp = (ChannelSftp) channel;
            channelSftp.cd(REMOTEDIR);
            Toast.makeText(getApplicationContext(),
                    "Downloading File...", Toast.LENGTH_SHORT).show();
            channelSftp.get(REMOTEFILE, LOCALDIR);
            Toast.makeText(getApplicationContext(),
                    "File Downloaded!", Toast.LENGTH_SHORT).show();
            channelSftp.exit();
            session.disconnect();

           /* byte[] buffer = new byte[1024];
            BufferedInputStream bis = new BufferedInputStream(channelSftp.get(REMOTEFILE));
            File newFile = new File("/home/maids1/Downloads/image.jpg");
            OutputStream os = new FileOutputStream(newFile);
            BufferedOutputStream bos = new BufferedOutputStream(os);
            int readCount;
            while ((readCount = bis.read(buffer)) > 0) {
                Toast.makeText(getApplicationContext(),
                        "Writing Fike...", Toast.LENGTH_SHORT).show();
                bos.write(buffer, 0, readCount);
            }
            bis.close();
            bos.close(); */
        }catch(Exception e){
            e.printStackTrace();
        }

    }

    }